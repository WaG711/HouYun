@model HouYun.ViewModels.forVideo.DetailsViewModel

@{
    ViewData["Title"] = @Model.Video.Title;
}

<div class="video-list">
    @foreach (var video in Model.Videos)
    {
        <div class="video-item">
            <div class="video-card">
                <a href="@Url.Action("Details", "Video", new { videoId = video.VideoId })">
                    <img class="card-img-details poster-image" src="@Url.Content("~/posters/" + video.PosterPath)" alt="Video Poster">
                </a>
                <div class="card-body">
                    <h4 class="card-title">
                        <a href="@Url.Action("Details", "Video", new { videoId = video.VideoId })">@video.Title</a>
                        <div class="dropdown-container">
                            <div class="dropdown">
                                <button onclick="toggleDropdown(this)" class="zxc btn btn-outline-secondary btn-sm custom-btn dropdown-toggle">
                                    ...
                                </button>
                                <div class="dropdown-menu">
                                    <a href="@Url.Action("AddToWatchLater", "WatchLater", new { videoId = video.VideoId })" class="dropdown-item">Смотреть позже</a>
                                </div>
                            </div>
                        </div>
                    </h4>
                    <p class="card-text">
                        <a href="@Url.RouteUrl("channel", new { channelName = video.Channel.Name })">@video.Channel.Name</a>
                    </p>
                    <p class="card-text">
                        <a href="@Url.Action("Details", "Video", new { videoId = video.VideoId })">@Helper.FormatViews(video.Views.Count) | @Helper.TimeAgo(video.UploadDate)</a>
                    </p>
                </div>
            </div>
        </div>
    }
</div>
<div class="main-video">
    <video id="videoPlayer" class="video-js vjs-default-skin" controls
           width="1422" height="800">
        <source src="@Url.Content("~/videos/" + Model.Video.VideoPath)" type="video/mp4">
    </video>

    <h2>@Model.Video.Title</h2>

    <h4 class="video-channel">
        <a href="@Url.RouteUrl("channel", new { channelName = @Model.Video.Channel.Name })">@Model.Video.Channel.Name</a>
        <span>
            <form id="likeForm" style="display: inline-block;">
                <input type="hidden" id="videoId" name="videoId" value="@Model.Video.VideoId" />
                <button type="button" onclick="toggleLike('like')" class="btn btn-primary" id="likeButton" data-like="like">Like</button>
                <button type="button" onclick="toggleLike('removeLike')" class="btn btn-danger" id="removeLikeButton" style="display: none;">Remove Like</button>
            </form>
        </span>
    </h4>

    <div class="video-details">
        <p>@Helper.FormatViews(@Model.Video.Views.Count) || @Helper.TimeAgo(@Model.Video.UploadDate)</p>
        <div class="details-content">
            <p>@Model.Video.Description</p>
        </div>
    </div>

    <div id="commentsSection">
        <h3>Comments</h3>
        <form id="addCommentForm">
            <input type="hidden" id="videoId" name="videoId" value="@Model.Video.VideoId" />
            <textarea id="commentText" name="commentText" rows="4" cols="50" required></textarea><br>
            <button type="button" onclick="addComment()" class="btn btn-primary">Add Comment</button>
        </form>
        @foreach (var comment in Model.Video.Comments)
        {
            <div>
                <a href="@Url.RouteUrl("channel", new { channelName = @comment.Channel.Name })">Posted by: @comment.Channel.Name</a>
                <p>@comment.Text</p>
            </div>
        }
    </div>
</div>

<link rel="stylesheet" href="~/css/videoDetails.css" asp-append-version="true" />
<script src="~/js/videoDetails.js"></script>

<script>
    var player = videojs('videoPlayer');
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var videoId = '@Model.Video.VideoId';
        addView(videoId);
        AddToWatchHistory(videoId);
    });
</script>
