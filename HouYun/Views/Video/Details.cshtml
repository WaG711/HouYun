@model HouYun.ViewModels.forVideo.DetailsViewModel

<link rel="stylesheet" href="~/css/videoDetails.css" asp-append-version="true" />

@{
    ViewData["Title"] = @Model.Video.Title;
}

<div class="row">
    <div class="col-md-6">
        <h3>All Videos</h3>
        <div class="row">
            @foreach (var video in Model.Videos)
            {
                <div class="col-md-6 mb-3">
                    <div class="card">
                        <a href="@Url.Action("Details", "Video", new { videoId = video.VideoId })">
                            <div class="card-body">
                                <h5 class="card-title">@video.Title</h5>
                                <p class="card-text">Uploaded by: @video.Channel.Name</p>
                                <p class="card-text">Upload Date: @video.UploadDate.ToString("dd/MM/yyyy")</p>
                                <p class="card-text">Views: @video.Views.Count</p>
                                <img src="@Url.Content("~/posters/" + video.PosterPath)" alt="Video Poster" style="max-width: 100%;">
                            </div>
                        </a>
                        <a href="@Url.Action("AddToWatchLater", "WatchLater", new { videoId = video.VideoId })" class="btn btn-primary">Добавить в "Смотреть позже"</a>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-md-6">
        <h2>@Model.Video.Title</h2>
        <p>@Model.Video.Description</p>
        <p>Uploaded by: @Model.Video.Channel.Name</p>
        <p>Upload Date: @Model.Video.UploadDate.ToString("yyyy-MM-dd HH:mm:ss")</p>
        <p>Views: @Model.Video.Views.Count</p>

        <video id="videoPlayer" controls style="max-width: 100%;">
            <source src="@Url.Content("~/videos/" + Model.Video.VideoPath)" type="video/mp4">
        </video>

        <p>Likes: @Model.Video.Likes.Count</p>
        <form id="likeForm">
            <input type="hidden" id="videoId" name="videoId" value="@Model.Video.VideoId" />
            <button type="button" onclick="toggleLike('like')" class="btn btn-primary" id="likeButton" data-like="like">Like</button>
            <button type="button" onclick="toggleLike('removeLike')" class="btn btn-danger" id="removeLikeButton" style="display: none;">Remove Like</button>
        </form>
        <div id="commentsSection">
            <h3>Comments</h3>
            @foreach (var comment in Model.Video.Comments)
            {
                <div>
                    <p>@comment.Text</p>
                    <p>Posted by: @comment.Channel.Name</p>
                </div>
            }
        </div>
        <div id="addCommentSection">
            <h3>Add Comment</h3>
            <form id="addCommentForm">
                <input type="hidden" id="videoId" name="videoId" value="@Model.Video.VideoId" />
                <textarea id="commentText" name="commentText" rows="4" cols="50" required></textarea><br>
                <button type="button" onclick="addComment()" class="btn btn-primary">Add Comment</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var videoId = '@Model.Video.VideoId';
            addView(videoId);
            AddToWatchHistory(videoId);
        });

        function addView(videoId) {
            var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/View/AddView/${videoId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify({})
            })
        }

        function AddToWatchHistory(videoId) {
            var csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/WatchHistory/AddToWatchHistory/${videoId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify({})
            })
        }
    </script>

    <script>
        function toggleLike(button) {
            var likeButton = document.getElementById("likeButton");
            var removeLikeButton = document.getElementById("removeLikeButton");
            if (button === "like") {
                if (likeButton.innerText === "Like") {
                    likeButton.innerText = "Remove Like";
                    likeButton.className = "btn btn-danger";
                    likeButton.setAttribute("onclick", "toggleButtonState('like')");
                    removeLikeButton.style.display = "none";
                } else {
                    likeButton.innerText = "Like";
                    likeButton.className = "btn btn-primary";
                    likeButton.setAttribute("onclick", "toggleButtonState('like')");
                    removeLikeButton.style.display = "none";
                }
            } else if (button === "removeLike") {
                if (removeLikeButton.innerText === "Remove Like") {
                    removeLikeButton.innerText = "Like";
                    removeLikeButton.className = "btn btn-primary";
                    removeLikeButton.setAttribute("onclick", "toggleButtonState('removeLike')");
                    likeButton.style.display = "none";
                } else {
                    removeLikeButton.innerText = "Remove Like";
                    removeLikeButton.className = "btn btn-danger";
                    removeLikeButton.setAttribute("onclick", "toggleButtonState('removeLike')");
                    likeButton.style.display = "none";
                }
            }
        }
    </script>

    <script>
        function addLike() {
            var videoId = document.getElementById("videoId").value;
            fetch("/Like/AddLike?videoId=" + videoId, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        setLikeCookie(true);
                        toggleButtonState('like');
                    }
                })
                .catch(error => {
                    console.error('Error adding like:', error);
                });
        }
    </script>

    <script>
        function removeLike() {
            var videoId = document.getElementById("videoId").value;
            fetch("/Like/RemoveLike?videoId=" + videoId, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        setLikeCookie(false);
                        toggleButtonState('removeLike');
                    }
                })
                .catch(error => {
                    console.error('Error removing like:', error);
                });
        }
    </script>

    <script>
        function toggleButtonState(button) {
            var likeButton = document.getElementById("likeButton");
            if (button === "like") {
                likeButton.innerText = "Remove Like";
                likeButton.className = "btn btn-danger";
                likeButton.setAttribute("onclick", "removeLike()");
            } else {
                likeButton.innerText = "Like";
                likeButton.className = "btn btn-primary";
                likeButton.setAttribute("onclick", "addLike()");
            }
        }
    </script>

    <script>
        function setLikeCookie(liked) {
            document.cookie = `videoLiked=${liked}; path=/`;
        }

        function getLikeCookie() {
            const cookieName = "videoLiked=";
            const decodedCookie = decodeURIComponent(document.cookie);
            const cookieArray = decodedCookie.split(';');
            for (let i = 0; i < cookieArray.length; i++) {
                let cookie = cookieArray[i];
                while (cookie.charAt(0) === ' ') {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(cookieName) === 0) {
                    return cookie.substring(cookieName.length, cookie.length);
                }
            }
            return null;
        }

        function setButtonStateFromCookie() {
            const liked = getLikeCookie();
            if (liked === "true") {
                toggleButtonState('like');
            } else if (liked === "false") {
                toggleButtonState('removeLike');
            }
        }

        setButtonStateFromCookie();
    </script>

    <script>
        function addComment() {
            var videoId = document.getElementById("videoId").value;
            var commentText = document.getElementById("commentText").value;

            var formData = new FormData();
            formData.append("videoId", videoId);
            formData.append("commentText", commentText);

            fetch("/Comment/AddComment", {
                method: "POST",
                body: formData,
                headers: {
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }
    </script>
}